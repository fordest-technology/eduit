generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
  PARENT
}

model User {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  password          String
  role              UserRole
  profileImage      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  emailVerified     DateTime?
  image             String?
  schoolId          String?
  accounts          Account[]
  admin             Admin?
  parent            Parent?
  processedPayments PaymentRequest[]
  approvedResults   Result[]          @relation("ResultApprover")
  sessions          Session[]
  student           Student?
  teacher           Teacher?
  school            School?           @relation(fields: [schoolId], references: [id])
  activityLogs      UserActivityLog[]

  @@index([schoolId])
}

model Admin {
  id          String    @id @default(cuid())
  userId      String    @unique
  adminType   AdminType
  permissions Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id               String           @id @default(cuid())
  userId           String           @unique
  employeeId       String?          @unique
  qualifications   String?
  specialization   String?
  joiningDate      DateTime?
  departmentId     String?
  address          String?
  city             String?
  state            String?
  country          String?
  phone            String?
  dateOfBirth      DateTime?
  gender           String?
  emergencyContact String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  classes          Class[]          @relation("ClassTeacher")
  subjects         SubjectTeacher[]
  department       Department?      @relation(fields: [departmentId], references: [id])
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([departmentId])
}

model Student {
  id              String           @id @default(cuid())
  userId          String           @unique
  admissionDate   DateTime?
  departmentId    String?
  address         String?
  city            String?
  state           String?
  country         String?
  phone           String?
  dateOfBirth     DateTime?
  gender          String?
  religion        String?
  bloodGroup      String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  classId         String?
  attendance      Attendance[]
  paymentRequests PaymentRequest[]
  results         Result[]
  department      Department?      @relation(fields: [departmentId], references: [id])
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes         StudentClass[]
  parents         StudentParent[]
  payments        StudentPayment[]
  subjects        StudentSubject[]
}

model Parent {
  id             String          @id @default(cuid())
  userId         String          @unique
  occupation     String?
  address        String?
  city           String?
  state          String?
  country        String?
  phone          String?
  alternatePhone String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  children       StudentParent[]
}

model School {
  id              String                @id @default(cuid())
  name            String
  address         String?
  phone           String?
  email           String                @unique
  logo            String?
  subdomain       String                @unique
  primaryColor    String?
  secondaryColor  String?
  shortName       String                @unique
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  sessions        AcademicSession[]
  bills           Bill[]
  classes         Class[]
  departments     Department[]
  events          Event[]
  paymentAccounts PaymentAccount[]
  resultConfigs   ResultConfiguration[]
  levels          SchoolLevel[]
  subjects        Subject[]
  users           User[]

  @@index([subdomain])
}

model Department {
  id          String    @id @default(cuid())
  name        String
  description String?
  schoolId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  school      School    @relation(fields: [schoolId], references: [id])
  students    Student[]
  subjects    Subject[]
  teachers    Teacher[]
}

model Class {
  id        String         @id @default(cuid())
  name      String
  section   String?
  schoolId  String
  teacherId String?
  levelId   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  level     SchoolLevel?   @relation(fields: [levelId], references: [id])
  school    School         @relation(fields: [schoolId], references: [id])
  teacher   Teacher?       @relation("ClassTeacher", fields: [teacherId], references: [id])
  subjects  ClassSubject[]
  students  StudentClass[]

  @@index([schoolId])
  @@index([teacherId])
  @@index([levelId])
  @@index([schoolId, name])
}

model Subject {
  id           String           @id @default(cuid())
  name         String
  code         String?          @unique
  description  String?
  schoolId     String
  departmentId String?
  levelId      String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  classes      ClassSubject[]
  results      Result[]
  students     StudentSubject[]
  department   Department?      @relation(fields: [departmentId], references: [id])
  level        SchoolLevel?     @relation(fields: [levelId], references: [id])
  school       School           @relation(fields: [schoolId], references: [id])
  teachers     SubjectTeacher[]

  @@index([schoolId])
  @@index([departmentId])
  @@index([levelId])
}

model AcademicSession {
  id                   String                @id @default(cuid())
  name                 String
  startDate            DateTime
  endDate              DateTime
  isCurrent            Boolean               @default(false)
  schoolId             String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  school               School                @relation(fields: [schoolId], references: [id])
  attendance           Attendance[]
  results              Result[]
  resultConfigurations ResultConfiguration[]
  studentClasses       StudentClass[]

  @@index([schoolId])
  @@index([schoolId, isCurrent])
}

model StudentClass {
  id         String           @id @default(cuid())
  studentId  String
  classId    String
  sessionId  String
  rollNumber String?
  status     EnrollmentStatus @default(ACTIVE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  class      Class            @relation(fields: [classId], references: [id])
  session    AcademicSession  @relation(fields: [sessionId], references: [id])
  student    Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId, sessionId])
  @@index([classId])
  @@index([sessionId])
  @@index([studentId])
  @@index([classId, sessionId])
  @@index([classId, sessionId, status])
}

model StudentParent {
  id        String   @id @default(cuid())
  studentId String
  parentId  String
  relation  String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Parent   @relation(fields: [parentId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, parentId])
}

model SubjectTeacher {
  id        String   @id @default(cuid())
  subjectId String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, teacherId])
}

model ClassSubject {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  class     Class    @relation(fields: [classId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])

  @@unique([classId, subjectId])
  @@index([classId])
  @@index([subjectId])
}

model Attendance {
  id        String           @id @default(cuid())
  date      DateTime
  status    AttendanceStatus
  studentId String
  sessionId String
  remarks   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  session   AcademicSession  @relation(fields: [sessionId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, date, sessionId])
}

model Result {
  id                String           @id @default(cuid())
  studentId         String
  subjectId         String
  sessionId         String
  grade             String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  adminComment      String?
  affectiveTraits   Json?
  approvedById      String?
  cumulativeAverage Float?
  customFields      Json?
  periodId          String
  psychomotorSkills Json?
  remark            String
  teacherComment    String?
  total             Float
  componentScores   ComponentScore[]
  approvedBy        User?            @relation("ResultApprover", fields: [approvedById], references: [id])
  period            ResultPeriod     @relation(fields: [periodId], references: [id])
  session           AcademicSession  @relation(fields: [sessionId], references: [id])
  student           Student          @relation(fields: [studentId], references: [id])
  subject           Subject          @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, periodId, sessionId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  isPublic    Boolean   @default(true)
  schoolId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  school      School    @relation(fields: [schoolId], references: [id])
}

model StudentSubject {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId])
}

model Bill {
  id              String           @id @default(cuid())
  name            String
  amount          Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  schoolId        String
  accountId       String
  account         PaymentAccount   @relation(fields: [accountId], references: [id])
  school          School           @relation(fields: [schoolId], references: [id])
  assignments     BillAssignment[]
  items           BillItem[]
  paymentRequests PaymentRequest[]
}

model BillItem {
  id          String   @id @default(cuid())
  billId      String
  name        String
  amount      Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bill        Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)
}

model PaymentAccount {
  id          String   @id @default(cuid())
  name        String
  accountNo   String
  bankName    String
  branchCode  String?
  description String?
  isActive    Boolean  @default(true)
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bills       Bill[]
  school      School   @relation(fields: [schoolId], references: [id])
}

model BillAssignment {
  id              String             @id @default(cuid())
  billId          String
  targetType      BillAssignmentType
  targetId        String
  dueDate         DateTime
  status          BillStatus         @default(PENDING)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  bill            Bill               @relation(fields: [billId], references: [id])
  paymentRequests PaymentRequest[]
  studentPayments StudentPayment[]
}

model StudentPayment {
  id               String           @id @default(cuid())
  billAssignmentId String
  studentId        String
  amountPaid       Float
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  paymentRequests  PaymentRequest[]
  billAssignment   BillAssignment   @relation(fields: [billAssignmentId], references: [id])
  student          Student          @relation(fields: [studentId], references: [id])
}

model PaymentRequest {
  id               String          @id @default(cuid())
  billId           String
  billAssignmentId String
  studentPaymentId String?
  studentId        String
  amount           Float
  receiptUrl       String?
  status           PaymentStatus   @default(PENDING)
  notes            String?
  processedById    String?
  processedAt      DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  billAssignment   BillAssignment  @relation(fields: [billAssignmentId], references: [id])
  bill             Bill            @relation(fields: [billId], references: [id])
  processedBy      User?           @relation(fields: [processedById], references: [id])
  student          Student         @relation(fields: [studentId], references: [id])
  studentPayment   StudentPayment? @relation(fields: [studentPaymentId], references: [id])
}

model SchoolLevel {
  id          String    @id @default(cuid())
  name        String
  description String?
  order       Int       @default(0)
  schoolId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  classes     Class[]
  school      School    @relation(fields: [schoolId], references: [id])
  subjects    Subject[]

  @@unique([schoolId, name])
}

model UserActivityLog {
  id        String   @id @default(cuid())
  userId    String
  page      String
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([page])
  @@index([createdAt])
}

model ApiRequestLog {
  id        String   @id @default(cuid())
  route     String
  method    String
  status    Int
  duration  Int
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([route])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ResultConfiguration {
  id                    String                @id @default(cuid())
  schoolId              String
  cumulativeEnabled     Boolean               @default(true)
  cumulativeMethod      String                @default("progressive_average")
  showCumulativePerTerm Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  sessionId             String
  assessmentComponents  AssessmentComponent[]
  gradingScale          GradingScale[]
  school                School                @relation(fields: [schoolId], references: [id])
  session               AcademicSession       @relation(fields: [sessionId], references: [id])
  periods               ResultPeriod[]

  @@unique([schoolId, sessionId])
}

model ResultPeriod {
  id              String              @id @default(cuid())
  name            String
  weight          Float               @default(1)
  configurationId String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  results         Result[]
  configuration   ResultConfiguration @relation(fields: [configurationId], references: [id])
}

model AssessmentComponent {
  id              String              @id @default(cuid())
  name            String
  key             String
  maxScore        Float
  configurationId String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  configuration   ResultConfiguration @relation(fields: [configurationId], references: [id])
  scores          ComponentScore[]
}

model GradingScale {
  id              String              @id @default(cuid())
  minScore        Float
  maxScore        Float
  grade           String
  remark          String
  configurationId String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  configuration   ResultConfiguration @relation(fields: [configurationId], references: [id])
}

model ComponentScore {
  id          String              @id @default(cuid())
  score       Float
  componentId String
  resultId    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  component   AssessmentComponent @relation(fields: [componentId], references: [id])
  result      Result              @relation(fields: [resultId], references: [id])
}

enum AdminType {
  SUPER_ADMIN
  SCHOOL_ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  TRANSFERRED
  GRADUATED
}

enum ExamType {
  QUIZ
  TEST
  MIDTERM
  FINAL
}

enum BillAssignmentType {
  CLASS
  STUDENT
}

enum BillStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  OVERDUE
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}
