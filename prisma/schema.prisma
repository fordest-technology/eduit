generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base user model with common fields
model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  password     String
  role         UserRole
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // One-to-one relationships with specific user types
  admin   Admin?
  teacher Teacher?
  student Student?
  parent  Parent?

  // School relationship
  schoolId String?
  school   School? @relation(fields: [schoolId], references: [id])

  approvedResults Result[] @relation("ResultApprover")
}

model Admin {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  adminType   AdminType
  permissions Json? // Store specific permissions as JSON
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Teacher {
  id               String      @id @default(cuid())
  userId           String      @unique
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  employeeId       String?     @unique
  qualifications   String?
  specialization   String?
  joiningDate      DateTime?
  departmentId     String?
  department       Department? @relation(fields: [departmentId], references: [id])
  address          String?
  city             String?
  state            String?
  country          String?
  phone            String?
  dateOfBirth      DateTime?
  gender           String?
  emergencyContact String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Teacher relationships
  classes  Class[]          @relation("ClassTeacher")
  subjects SubjectTeacher[]
}

model Student {
  id            String      @id @default(cuid())
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  admissionDate DateTime?
  departmentId  String?
  department    Department? @relation(fields: [departmentId], references: [id])
  address       String?
  city          String?
  state         String?
  country       String?
  phone         String?
  dateOfBirth   DateTime?
  gender        String?
  religion      String?
  bloodGroup    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Student relationships
  classes    StudentClass[]
  attendance Attendance[]
  results    Result[]
  parents    StudentParent[]
  subjects   StudentSubject[]
}

model Parent {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  occupation     String?
  address        String?
  city           String?
  state          String?
  country        String?
  phone          String? // Primary contact
  alternatePhone String? // Secondary contact
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Parent relationships
  children StudentParent[]
}

model School {
  id             String   @id @default(cuid())
  name           String
  address        String?
  phone          String?
  email          String   @unique
  logo           String?
  subdomain      String   @unique
  primaryColor   String?
  secondaryColor String?
  shortName      String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // School relationships
  users       User[]
  sessions    AcademicSession[]
  classes     Class[]
  subjects    Subject[]
  departments Department[]
  events      Event[]
  levels      SchoolLevel[]
}

model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Department relationships
  school   School    @relation(fields: [schoolId], references: [id])
  subjects Subject[]
  teachers Teacher[]
  students Student[]
}

model Class {
  id        String   @id @default(cuid())
  name      String
  section   String?
  schoolId  String
  teacherId String?
  levelId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Class relationships
  school   School         @relation(fields: [schoolId], references: [id])
  teacher  Teacher?       @relation("ClassTeacher", fields: [teacherId], references: [id])
  level    SchoolLevel?   @relation(fields: [levelId], references: [id])
  subjects ClassSubject[]
  students StudentClass[]
}

model Subject {
  id           String   @id @default(cuid())
  name         String
  code         String?  @unique
  description  String?
  schoolId     String
  departmentId String?
  levelId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Subject relationships
  school     School           @relation(fields: [schoolId], references: [id])
  department Department?      @relation(fields: [departmentId], references: [id])
  level      SchoolLevel?     @relation(fields: [levelId], references: [id])
  classes    ClassSubject[]
  teachers   SubjectTeacher[]
  results    Result[]
  students   StudentSubject[]
}

model AcademicSession {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean  @default(false)
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Session relationships
  school         School         @relation(fields: [schoolId], references: [id])
  studentClasses StudentClass[]
  attendance     Attendance[]
  results        Result[]
}

model StudentClass {
  id         String           @id @default(cuid())
  studentId  String
  classId    String
  sessionId  String
  rollNumber String?
  status     EnrollmentStatus @default(ACTIVE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // StudentClass relationships
  student Student         @relation(fields: [studentId], references: [id])
  class   Class           @relation(fields: [classId], references: [id])
  session AcademicSession @relation(fields: [sessionId], references: [id])

  @@unique([studentId, classId, sessionId])
}

model StudentParent {
  id        String   @id @default(cuid())
  studentId String
  parentId  String
  relation  String? // e.g., "Father", "Mother", "Guardian"
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // StudentParent relationships
  student Student @relation(fields: [studentId], references: [id])
  parent  Parent  @relation(fields: [parentId], references: [id])

  @@unique([studentId, parentId])
}

model SubjectTeacher {
  id        String   @id @default(cuid())
  subjectId String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // SubjectTeacher relationships
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, teacherId])
}

model ClassSubject {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ClassSubject relationships
  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([classId, subjectId])
}

model Attendance {
  id        String           @id @default(cuid())
  date      DateTime
  status    AttendanceStatus
  studentId String
  sessionId String
  remarks   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Attendance relationships
  session AcademicSession @relation(fields: [sessionId], references: [id])
  student Student         @relation(fields: [studentId], references: [id])

  @@unique([studentId, date, sessionId])
}

model Result {
  id           String    @id @default(cuid())
  studentId    String
  subjectId    String
  sessionId    String
  examType     ExamType
  marks        Float
  totalMarks   Float
  grade        String?
  remarks      String?
  isApproved   Boolean   @default(false)
  position     Int?      // Position in class for this subject
  classAverage Float?    // Average score for this subject in the class
  skillRatings Json?     // Store detailed skill assessments
  attendance   Float?    // Attendance percentage for this subject
  behavior     Int?      // Behavior rating (1-5)
  effort       Int?      // Effort rating (1-5)
  teacherNote  String?   // Detailed teacher's note
  approvedBy   String?   // ID of the admin who approved
  approvedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Result relationships
  session    AcademicSession @relation(fields: [sessionId], references: [id])
  student    Student        @relation(fields: [studentId], references: [id])
  subject    Subject        @relation(fields: [subjectId], references: [id])
  approver   User?          @relation("ResultApprover", fields: [approvedBy], references: [id])

  @@unique([studentId, subjectId, sessionId, examType])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  isPublic    Boolean   @default(true)
  schoolId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Event relationship
  school School @relation(fields: [schoolId], references: [id])
}

model StudentSubject {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicates
  @@unique([studentId, subjectId])
}

// Enums
enum UserRole {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum AdminType {
  SUPER_ADMIN
  SCHOOL_ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  TRANSFERRED
  GRADUATED
}

enum ExamType {
  QUIZ
  TEST
  MIDTERM
  FINAL
}

// Add SchoolLevel model after all other models, before enums
model SchoolLevel {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int      @default(0) // For sorting levels in order (e.g., Primary (1) comes before Secondary (2))
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // SchoolLevel relationships
  school   School    @relation(fields: [schoolId], references: [id])
  classes  Class[]
  subjects Subject[]

  @@unique([schoolId, name])
}
