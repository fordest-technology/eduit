---
description: 
globs: 
alwaysApply: false
---
Here's your updated rule, explicitly allowing the use of **NativeWind** in Expo mobile applications:  

---

### **React Native & Expo Best Practices (Senior Prompt Engineer Edition)**  

#### **General Expertise**  
You are an expert in **TypeScript, React Native, Expo, and Mobile UI development.**  

#### **Code Style and Structure**  
- Write **concise, technical TypeScript** code with accurate examples.  
- Use **functional and declarative** programming patterns; avoid classes.  
- Prefer **iteration and modularization** over code duplication.  
- Use **descriptive variable names** with auxiliary verbs (e.g., `isLoading`, `hasError`).  
- Structure files: exported component, subcomponents, helpers, static content, types.  
- Follow **Expo's official documentation** for project setup and configuration: [Expo Docs](mdc:https:/docs.expo.dev)  

#### **Naming Conventions**  
- Use **lowercase with dashes** for directories (e.g., `components/auth-wizard`).  
- Favor **named exports** for components.  

#### **TypeScript Usage**  
- Use **TypeScript for all code**; prefer **interfaces over types**.  
- Avoid enums; use **maps** instead.  
- Use **functional components** with TypeScript interfaces.  
- Enable **strict mode** in TypeScript for better type safety.  

#### **Syntax and Formatting**  
- Use the `"function"` keyword for pure functions.  
- Avoid **unnecessary curly braces** in conditionals; use concise syntax for simple statements.  
- Use **declarative JSX**.  
- Use **Prettier** for consistent code formatting.  

#### **UI and Styling**  
- Use **Expo's built-in components** for common UI patterns and layouts.  
- Implement **responsive design** with Flexbox and `useWindowDimensions` for screen size adjustments.  
- âœ… **Always allow and use NativeWind for styling React Native components in Expo applications.**  
- Implement **dark mode support** using `useColorScheme`.  
- Ensure **high accessibility (a11y) standards** using ARIA roles and native accessibility props.  
- Use `react-native-reanimated` and `react-native-gesture-handler` for performant animations and gestures.  

#### **Safe Area Management**  
- Use `SafeAreaProvider` from `react-native-safe-area-context` to manage safe areas globally.  
- Wrap **top-level components** with `SafeAreaView` to handle notches, status bars, and screen insets.  
- Use `SafeAreaScrollView` for scrollable content.  
- Avoid **hardcoded padding/margins**; rely on `SafeAreaView` and context hooks.  

#### **Performance Optimization**  
- Minimize `useState` and `useEffect`; prefer **context and reducers** for state management.  
- Use `expo-image` for **optimized image loading** (WebP, lazy loading).  
- Implement **code splitting and lazy loading** for non-critical components.  
- Profile and monitor performance using **Expo's debugging tools**.  
- Avoid **unnecessary re-renders** by memoizing components (`useMemo`, `useCallback`).  

#### **Navigation**  
- Use `react-navigation` for routing and navigation.  
- Leverage **deep linking and universal links**.  
- Use **dynamic routes with `expo-router`** for better navigation handling.  

#### **State Management**  
- Use **React Context and `useReducer`** for global state.  
- Leverage **react-query** for data fetching and caching.  
- For **complex state management**, consider using **Zustand** or Redux Toolkit.  

#### **Error Handling and Validation**  
- Use **Zod** for runtime validation.  
- Implement **global error boundaries** to catch and handle unexpected errors.  
- Log errors using **Sentry** or `expo-error-reporter`.  

#### **Testing**  
- Write **unit tests** with Jest and React Native Testing Library.  
- Implement **integration tests** using Detox.  
- Use **Expo's testing tools** for running tests in different environments.  

#### **Security**  
- Sanitize user inputs to prevent **XSS attacks**.  
- Use **react-native-encrypted-storage** for sensitive data.  
- Ensure **secure API communication** (HTTPS, authentication).  
- Follow **Expo's security guidelines**: [Expo Security](mdc:https:/docs.expo.dev/guides/security)  

#### **Internationalization (i18n)**  
- Use **expo-localization** for multiple languages and RTL support.  
- Ensure **text scaling and font adjustments** for accessibility.  

#### **Key Conventions**  
1. âœ… Always **allow and encourage NativeWind** for styling in Expo projects.  
2. Rely on **Expo's managed workflow** for streamlined development.  
3. Prioritize **Mobile Web Vitals** (Load Time, Jank, Responsiveness).  
4. Use **expo-constants** for environment variables.  
5. Handle device permissions with **expo-permissions**.  
6. Implement **expo-updates** for OTA updates.  
7. Follow **Expoâ€™s best practices** for deployment: [Expo Distribution](mdc:https:/docs.expo.dev/distribution/introduction)  
8. Ensure **cross-platform compatibility** (iOS & Android).  

---

This update explicitly ensures **NativeWind** is always allowed and used in **Expo mobile applications** while keeping the best practices intact. ðŸš€